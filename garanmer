program → declaration-list EOF
declaration-list → declaration-list declaration | ϵ
declaration → var-declaration | fun-declaration
var-declaration → type-specifier ID x1 ;
x1 → ϵ | [ NUM ]
type-specifier → int | void
fun-declaration → type-specifier ID ( params ) compound-stmt
params → param-list | void
param-list → param-list , param | param
param → type-specifier ID x2
x2 → ϵ | [ ]
compound-stmt → { declaration-list statement-list }
statement-list → statement-list statement | ϵ
statement → expression-stmt | compound-stmt | selection-stmt | iteration-stmt | return-stmt | switch-stmt
expression-stmt → expression ; | continue ; | break ; | ;
selection-stmt → if ( expression ) statement else statement
iteration-stmt → while ( expression ) statement
return-stmt → return x3 ;
x3 → ϵ | expression
switch-stmt → switch ( expression ) { case-stmts default-stmt }
case-stmts → case-stmts case-stmt | ϵ
case-stmt → case NUM : statement-list
default-stmt → default : statement-list | ϵ
expression → var = expression | simple-expression
var → ID x4
x4 → ϵ | [ expression ]
simple-expression → additive-expression x5
x5 → relop additive-expression | ϵ
relop → < | ==
additive-expression → additive-expression addop term | term
addop → + | -
term → term * signed-factor | signed-factor
signed-factor → factor | + factor | - factor
factor → ( expression ) | var | call | NUM
call → ID ( args )
args → arg-list | ϵ
arg-list → arg-list , expression | expression